import java.util.Scanner;
import java.awt.Point;

public class MyProgram {

    public static void main(String[] args) {
        new MyProgram().run();
    }

    public void run() {
        Scanner input = new Scanner(System.in);
        int wiggle = 1;
        System.out.println("Distance is in meters and time is in seconds.");

        System.out.print("Where is the robot's x-cord? ");
        int robotX = (int) input.nextDouble();
        System.out.print("Where is the robot's y-cord? ");
        int robotY = (int) input.nextDouble();
        Point robot = new Point(robotX, robotY);

        System.out.print("What is the robot's velocity? ");
        double robotSpeed = input.nextDouble();

        System.out.print("Where is the nearest scoring zone's x-cord? ");
        int scoreX = (int) input.nextDouble();
        System.out.print("Where is the nearest scoring zone's y-cord? ");
        int scoreY = (int) input.nextDouble();
        Point scoringZone = new Point(scoreX, scoreY);

        System.out.println(" ");

        double[] times = new double[6];

        for (int i = 0; i < 6; i++) {
            Point start = new Point((int)(Math.random() * 81) - 40, (int)(Math.random() * 81) - 40);
            double speed = speedRandomizer();

            System.out.println("GamePiece " + (i + 1) + " X1 " + start.x);
            System.out.println("GamePiece " + (i + 1) + " Y1 " + start.y);
            System.out.println("GamePiece " + (i + 1) + " velocity " + speed);

            Point end = null;
            if (speed != 0) {
                end = new Point((int)(Math.random() * 81) - 40, (int)(Math.random() * 81) - 40);
                System.out.println("GamePiece " + (i + 1) + " X2 " + end.x);
                System.out.println("GamePiece " + (i + 1) + " Y2 " + end.y);
            }

            double time = (speed != 0)
                ? calculateTimeToMovingGamePiece(robot, robotSpeed, scoringZone, start, end, speed, wiggle)
                : calculateTimeToStationaryGamePiece(robot, robotSpeed, scoringZone, start, speed, wiggle);

            times[i] = time;
            System.out.println(" ");
        }

        int bestIndex = 0;
        for (int i = 1; i < times.length; i++) {
            if (times[i] < times[bestIndex]) {
                bestIndex = i;
            }
        }

        System.out.println("Go to Game Piece " + (bestIndex + 1) + "!");
        System.out.println("This is held together with duct tape and dreams!");
    }

    private double calculateTimeToMovingGamePiece(
        Point robot, double robotSpeed, Point scoringZone,
        Point start, Point end, double speed, int wiggle
    ) {
        double dxStart = start.x - robot.x;
        double dyStart = start.y - robot.y;
        double distanceStart = Math.sqrt(dxStart * dxStart + dyStart * dyStart);
        double timeToStart = (robotSpeed == 0) ? Double.POSITIVE_INFINITY : distanceStart / robotSpeed;

        double rho = 1.225;
        double Cd = 0.47;
        double A = 0.05;
        double m = 1.0;
        double k = (0.5 * rho * Cd * A) / m;

        double velocityAtStart = speed * Math.exp(-k * timeToStart);
        double distanceMoved = (speed / k) * (1 - Math.exp(-k * timeToStart));

        double totalDistance = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
        double fractionTraveled = distanceMoved / totalDistance;
        if (fractionTraveled > 1.0) fractionTraveled = 1.0;

        double newX = start.x + (end.x - start.x) * fractionTraveled;
        double newY = start.y + (end.y - start.y) * fractionTraveled;

        double dxNew = newX - robot.x;
        double dyNew = newY - robot.y;
        double distanceToNew = Math.sqrt(dxNew * dxNew + dyNew * dyNew);
        double timeToGamePiece = (robotSpeed == 0) ? Double.POSITIVE_INFINITY : distanceToNew / robotSpeed;

        double dx2 = robot.x - scoringZone.x;
        double dy2 = robot.y - scoringZone.y;
        double distance2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);
        double timeToScore = (robotSpeed == 0) ? Double.POSITIVE_INFINITY : distance2 / robotSpeed;

        return (robotSpeed < 0) ? wiggle + timeToGamePiece + timeToScore : timeToGamePiece;
    }

    private double calculateTimeToStationaryGamePiece(
        Point robot, double robotSpeed, Point scoringZone,
        Point target, double speed, int wiggle
    ) {
        double dx = target.x - robot.x;
        double dy = target.y - robot.y;
        double distance = Math.sqrt(dx * dx + dy * dy);

        double dx2 = robot.x - scoringZone.x;
        double dy2 = robot.y - scoringZone.y;
        double distance2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);

        double timeToPiece = (robotSpeed == 0) ? distance : distance / robotSpeed;
        double timeToScore = (robotSpeed == 0) ? distance2 : distance2 / robotSpeed;

        return (robotSpeed < 0) ? wiggle + timeToPiece + timeToScore : timeToPiece;
    }

    private int speedRandomizer() {
        int[] values = {
            -5, -4, -4, -3, -3, -3, -2, -2, -2, -2,
            -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0,
             1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5
        };
        int index = (int)(Math.random() * values.length);
        return values[index];
    }
}
